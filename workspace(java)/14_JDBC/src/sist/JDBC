* JDBC(Java DataBase Connectivity)
  - Driver를 통한 Java와 데이터베이스에 연결 및 작업을 하기 위한 것이 주된 목적임.
  - JDBC는 자바 표준 인터페이스임. - JDBC API를 사용함.
  - JDBC는 Java와 데이터베이스 간의 통신 역할을 해 줌. - 중계적 역할을 함.
  

* JDBC 주요 인터페이스
  - java.sql.Driver : 오라클(DB)에서 사용되는 드라이버 인터페이스.
  - java.sql.Connection : DB 연결 정보를 가지고 있는 인터페이스.
  - java.sql.PreparedStatement : statement 인터페이스의 서브 인터페이스.
                                 DB에 sql문을 전송하는 방법을 알고 있는 인터페이스.
                                                               미리 준비하고 실행하는 인터페이스.
  - java.sql.ResultSet : DB 실행 결과를 가지고 있는 인터페이스.
  
  
* 오라클 DB를 Java에 연결하는 방법
  1. 물리적인 드라이버 설치
     - JDBC 라이브러리를 이용한 DB에 연결하기 위해서는 해당 DB 프로그램의 기능을
             수행하는 외부 라이브러리를 프로젝트에 추가해 주어야 DB를 연결할 수 있음.
     - 오라클 드라이버 파일(C:/oraclexe/app/oracle/product/11.2.0/server/jdbc/lib)
             안에 있는 ojdb6.jar 파일을 프로젝트에 포함시켜 주면 된다.
     - 주요 데이터베이스에 대한 JDBC 드라이버에 해당하는 클래스.
       Oracle : oracle.jdbc.driver.OracleDriver
       MySQL : com.mysql.jdbc.Driver
       
  2. JDBC URL
     - 각각의 웹사이트를 구분할 때 http://www.naver.com, http://www.daum.net
             같은 URL을 사용함. 이와 비슷하게 데이터베이스를 구분할 때도 URL과 비슷한 형식을
             갖는 JDBC URL을 사용함.
       * 오라클 URL => jdbc:oracle:thin:@host주소:port번호:데이터베이스 식별자(SID)
       * 참고로 오라클 드라이버는 thin 드라이버와 oci 드라이버가 있음.
         - thin 드라이버는 자바 언어로만 구현된 jdbc 드라이버로 jdk만 설치되어 있으면
                     어디든지 사용이 가능함.
         - oci 드라이버는 모듈을 설치해 주어야 사용이 가능한 드라이버.
   
  3. 드라이버 로딩
     - 포함된 라이브러리를 바탕으로 해당 오라클 드라이버를 메모리로 업로드를 시켜주어야 함.
     - 드라이버를 메모리로 업로드 시키는 방법은 Class.forName(드라이버 파일) 메서드를 이용함.
     - 이 메서드는 Class 라는 클래스에 포함되어 있으며, 해당 파일 경로에 위치한 파일을
             프로그램이 실행될 때 메모리 상에 업로드 시키는 기능을 수행한다.
          
  4. 커넥션 연결
     - 설치된 드라이버를 메모리 상에 업로드 시키면 이제 DB를 지금 사용하는 프로그램과
             연결을 시켜주어야 함. 이러한 연결을 시켜 주는 것을 커넥션(Connection)이라고 함.
     - DriverManager 클래스의 getConnection() 메서드를 이용하여 자신이 사용하는
             오라클 정보를 인자로 전달하여 연결을 수행하게 됨.
     - 오라클에 접속하기 위해서는 오라클의 정보(오라클 서버의 IP, 리스너 포트, 오라클 계정,
             계정의 비밀번호)를 알아야 한다.
  
* 실제 연결 순서
  1. 오라클 드라이버 로딩.
  2. 데이터베이스 커넥션 구함.
  3. 쿼리 실행을 위한 PreparedStatement 객체 생성.
  4. 쿼리 실행.
  5. 쿼리 실행 결과를 사용.
  6. 쿼리 종료.
  7. PreparedStatement 사용 종료.
  8. 데이터베이스 커넥션 사용 종료.
 