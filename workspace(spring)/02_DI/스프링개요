* 스프링 개요
 - 선수학습 : java, jsp(servlet), 스크립트언어(html, javascript, css, jquery)
 - 개념 : 자바 언어를 기반으로 한 애플리케이션을 제작할 때 효율적으로 빠르게 개발할 수 있도록 하는 애플리케이션 프레임워크(프로그래밍 틀).
 
 * 스프링 프레임워크란?
 - 스프링은 엔터프라이즈(기업용) 애플리케이션에서 필요로 하는 여러가지 기능들을 제공하는 프레임워크
 - Java EE가 제공하는 기능들을 스프링에서도 지원하고 있기 때문에 국내에서는 가장 인기 있는 프레임워크
 - 스프링은 Java EE에서 제공 하는 기능 외에 DI나 AOP와 같은 기능을 추가적으로 제공함.
 - Java EE에서 MVC-2 모델 방식도 새로운 애플리케이션을 개발할 때마다 일일이 처음부터 다시 개발해야하는 단점이 있음. 모든 애플리케이션에서 공통적인 기능들을 처음부터 다시 개발해야한다는 것은 상당히 비효율적.
 - 위 단점을 개선한 것이 스프링
 애플리케이션 개발 시에 일반적인 웹 애플리케이션에서 많이 사용하는 기능들은 미리 만들어서 제공을 하고, 그 외에 필요한 부분만 추가 및 수정하는 방식을 이용하면 됨. 이렇게하면 훨씬 효율적일 뿐만아니라 일정한 형식에 따라서 개발을 진행하므로 표준화가 이루어져 생산성도 높일 수 있음.
 - 애플리케이션은 규모가 커질수록 각각의 기능들을 개발자가 따로 개발하는 것보다는 표준화된 방법으로 개발하는 것이 상당히 유리.
 
 - 프레임워크(framework)란?
 프레임워크(framework)의 사전적 의미는 "어떤 것을 구성하는 구조 또는 뼈대"
 소프트웨어적 의미로는 "기능을 미리 클래스나 인터페이스 등으로 만들어 제공하는 반제품"
 즉, 어느 정도 완성된 상태로 제공하는 기능.
 
 * 스프링 프레임워크의 특징
 - 스프링은 경량의 프레임워크.
 * 자바의 객체를 담고 있는 컨테이너(IoC 컨테이너).
 * 객체의 생성, 관리, 소멸과 같은 생명주기를 관리.
 
 * DI(Dependency Infection : 의존성 주입)
  - DI는 스프링 핵심 개념 중 하나임.
  - 기존에는 어떤 한 클래스가 다른 클래스의 기능(메서드)을 사용하려면 당연히 개발자가 코드에서 직접적으로 사용할 클래스의 생성자를 호출해서 사용함(new 키워드)
	따라서 사용할 클래스와 사용된 클래스의 관계는 개발자에 의해 직접 코드에서 부여가 되었음 => 의존도가 높음(강한 결합)
  - 스프링에서는 객체 사이의 의존 관계를 객체 자신이 아닌 외부(스프링 컨테이너)에서 수행하는 개념
  	즉, 이러한 연관 관계를 개발자가 직접 코딩을 통해서 부여하는 것이 아니라 스프링 컨테이너가 연관관계를 직접 규정하는 것을 말함.
  	그러면 코드에서 직접적인 연관 관계가 발생하지 않으므로 각각의 클래스들의 변경이 자요로워짐 => 약한 결합
  	따라서 스프링 프레임워크에서는 각 클래스들의 연관 관계를 클래스들 간의 사이에서 맺어지는 것이 아니라 스프링 프레임워크에서 설정을 통해 맺어줌으로써 클래스들끼리 연관 관계를 맺지 않도록 구현
  - 스프링 프레임워크에서 의존 관계 설정은 설정 파일(bean.xml)이나 에노테이션을 이용하여 설정.
  
  - 스프링에서 클래스(빈: bean)를 담는 그릇을 스프링 컨테이너라고 함.
 스프링 기반 애플리케이션에서는 스프링 컨테이너에서 객체가 태어나고, 자라고 소멸함.
 스프링 컨테이너는 객체를 생성하고, 서로 엮어 주고, 이들의 전체 생명 주기를 관리함.
 스프링 컨테이너는 스프링 프레임워크 핵심부에 위치함.
 스프링 컨테이너는 종속 객체 주입을 이용해서 애플리케이션을 구성하는 컴포넌트를 관리하며 협력 컴포넌트 간 연관 관계의 형성도 스프링 컨테이너에서 이루어짐. 